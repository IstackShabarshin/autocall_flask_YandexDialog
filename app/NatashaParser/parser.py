#!/usr/bin/env python
# coding: utf-8

# In[1]:

from natasha import (
    Segmenter,
    MorphVocab,
    
    NewsEmbedding,
    NewsMorphTagger,
    NewsSyntaxParser,
    NewsNERTagger,
    
    PER,
    NamesExtractor,
    DatesExtractor,
    MoneyExtractor,
    AddrExtractor,

    Doc
)

import time #для debug

segmenter = Segmenter()
morph_vocab = MorphVocab()
emb = NewsEmbedding()
morph_tagger = NewsMorphTagger(emb)
syntax_parser = NewsSyntaxParser(emb)
ner_tagger = NewsNERTagger(emb)
names_extractor = NamesExtractor(morph_vocab)

# Вспомогательная функция вызова поисков по файлам/текстам
def fileOrNot(fileNameOrText, func, IsFile = False):
    if IsFile:
        try:
            f = open(fileNameOrText)
            text = f.read()
            return func(text)
        finally:
            f.close()
    else:
        return func(fileNameOrText)

def SplitOnLemmas(text):
    doc = Doc(text)

    segment = Segmenter()
    doc.segment(segment)

    emb = NewsEmbedding()
    morph_tagger = NewsMorphTagger(emb)
    doc.tag_morph(morph_tagger)

    morph_vocab = MorphVocab()
    for token in doc.tokens:
        token.lemmatize(morph_vocab)
    return [_.lemma for _ in doc.tokens]

# Вспомогательная функция поиска имен
def FindName_h(text):
    time_start_h = time.clock()
    print('    Start FindName_h working:...')
    
    #Инициализация
    print('        start initialize neuronets ')
    segmenter = Segmenter()
    morph_vocab = MorphVocab()
    emb = NewsEmbedding()
    morph_tagger = NewsMorphTagger(emb)
    syntax_parser = NewsSyntaxParser(emb)
    ner_tagger = NewsNERTagger(emb)
    names_extractor = NamesExtractor(morph_vocab)
    print('        stop initialize neuronets ' + str(time.clock() - time_start_h))
    
    doc = Doc(text) #Инициализация структуры
    #display(doc)
    
    doc.segment(segmenter) #Добавляет поля sents and tokens (предложения и "слова")
    #display(doc)
    print('        start fields filled ' + str(time.clock() - time_start_h))
    
    doc.tag_morph(morph_tagger) #Морфологический разбор
    doc.parse_syntax(syntax_parser) #Синтаксический разбор
    #display(doc)
    #|||||||||||||||Добавляют поля id, pos, feats, head_id, rel
    print('        after sync and morph analysis ' + str(time.clock() - time_start_h))
    
    doc.tag_ner(ner_tagger) #Добавляет поле Spans (значения PER, LOC, ORG)
    #display(doc.spans)
    print('        after context analysis ' + str(time.clock() - time_start_h))
    
    #Нормализация - приводит к именительному падежу
    for span in doc.spans:
        span.normalize(morph_vocab)
#     display(doc.spans)
    print('        after normalization ' + str(time.clock() - time_start_h))
    
    #Мудреная выборка из spans имен
    for span in doc.spans:
        if span.type == PER:
            span.extract_fact(names_extractor)
    
    res = {_.normal: _.fact.as_dict for _ in doc.spans if _.fact}
    print('        end FindName_h ' + str(time.clock() - time_start_h))
    return res

# Вспомогательная функция поиска дат
def FindDate_h(text):
    segmenter = Segmenter()
    morph_vocab = MorphVocab()
    dates_extractor = DatesExtractor(morph_vocab)

    return list(dates_extractor(text))

# Вспомогательая функия поиска адресов
def FindAddr_h(text):
    segmenter = Segmenter()
    morph_vocab = MorphVocab()
    addr_extractor = AddrExtractor(morph_vocab)
    
    return list(addr_extractor(text))

#---------------------------------------------------------------------
# Поиск имен в файле/тексте
def FindNames(fileNameOrText, IsFile = False):
    return fileOrNot(fileNameOrText, FindName_h, IsFile)

# Поиск дат в файле/тексте 
def FindDates(fileNameOrText, IsFile = False):
    return fileOrNot(fileNameOrText, FindDate_h, IsFile)

# Поиск адресов в файле/тексте
def FindAddrs(fileNameOrText, IsFile = False):
    return fileOrNot(fileNameOrText, FindAddr_h, IsFile)

# для разбиения на токены сообщений
def SplitOnSegments(text):
    doc = Doc(text)
    doc.segment(segmenter) #Добавляет поля sents and tokens (предложения и "слова")
    #display(doc)
    return list(doc.tokens)

# Нормализация - приводит к именительному падежу
def Normalize(text):
    doc = Doc(text) #Инициализация структуры
    #display(doc)
    
    doc.segment(segmenter) #Добавляет поля sents and tokens (предложения и "слова")
    #display(doc)
    
    doc.tag_morph(morph_tagger) #Морфологический разбор
    doc.parse_syntax(syntax_parser) #Синтаксический разбор
    #display(doc)
    #|||||||||||||||Добавляют поля id, pos, feats, head_id, rel
    
    doc.tag_ner(ner_tagger) #Добавляет поле Spans (значения PER, LOC, ORG)
    #display(doc.spans)
    
    #Нормализация - приводит к именительному падежу
    for token in doc.tokens:
        token.lemmatize(morph_vocab)
#     display(doc.tokens)
    return [_.lemma.lower() for _ in doc.tokens]


# In[2]:


# Normalize('Капусте нравится морковь, но не понять эту любовь')


# In[3]:


# text = 'Весна. Из-за Зеленой Стены, с диких невидимых равнин, ветер несет желтую медовую пыль каких-то цветов. От этой сладкой пыли сохнут губы — ежеминутно проводишь по ним языком — и, должно быть, сладкие губы у всех встречных женщин (и мужчин тоже, конечно). Это несколько мешает логически мыслить. Но зато небо! Синее, не испорченное ни единым облаком — (до чего были дики вкусы у древних, если их поэтов могли вдохновлять эти нелепые, безалаберные, глупо-толкущиеся кучи пара). Я люблю — уверен, не ошибусь, если скажу: мы любим — только такое вот, стерильное, безукоризненное небо! В такие дни — весь мир отлит из того же самого незыблемого, вечного стекла, как и Зеленая Стена, как и все наши постройки. В такие дни видишь самую синюю глубь вещей, какие-то неведомые дотоле, изумительные их уравнения — видишь в чем-нибудь таком самом привычном, ежедневном. Ну, вот хоть бы это. Нынче утром был я на эллинге, где строится ИНТЕГРАЛ, — и вдруг увидел станки: с закрытыми глазами, самозабвенно, кружились шары регуляторов; мотыли, сверкая, сгибались вправо и влево; гордо покачивал плечами балансир; в такт неслышной музыке приседало долото долбежного станка. Я вдруг увидел всю красоту этого грандиозного машинного балета, залитого легким голубым солнцем. И дальше — сам с собою: почему — красиво? Почему танец — красиво? Ответ: потому что это несвободное движение, потому что весь глубокий смысл танца именно в абсолютной, эстетической подчиненности, идеальной несвободе. И если верно, что наши предки отдавались танцу в самые вдохновенные моменты своей жизни (религиозные мистерии, военные парады), то это значит только одно: инстинкт несвободы издревле органически присущ человеку, и мы, в теперешней нашей жизни — только сознательно... Кончить придется после: щелкнул нумератор. Я подымаю глаза: О-90, конечно. И через полминуты она сама будет здесь: за мной на прогулку. Милая О! — мне всегда это казалось — что она похожа на свое имя: сантиметров на 10 ниже Материнской Нормы — и оттого вся кругло обточенная, и розовое О — рот — раскрыт навстречу каждому моему слову. И еще: круглая, пухлая складочка на запястье руки — такие бывают у детей. Когда она вошла, еще вовсю во мне гудел логический маховик, и я по инерции заговорил о только что установленной мною формуле, куда входили и мы все, и машины, и танец. —Чудесно. Не правда ли? — спросил я. —Да, чудесно. Весна, — розово улыбнулась мне О-90. —Ну, вот, не угодно ли: весна... Она — о весне. Женщины... Я замолчал. Внизу. Проспект полон: в такую погоду послеобеденный личный час — мы обычно тратим на дополнительную прогулку. Как всегда, музыкальный завод всеми своими трубами пел Марш Единого Государства. Мерными рядами, по четыре, восторженно отбивая такт, шли нумера — сотни, тысячи нумеров, в голубоватых юнифах 1, с золотыми бляхами на груди — государственный нумер каждого и каждой. И я — мы, четверо, — одна из бесчисленных волн в этом могучем потоке. Слева от меня О-90 (если бы это писал один из моих волосатых предков лет тысячу назад, — он, вероятно, назвал бы ее этим смешным словом «моя»); справа — два каких-то незнакомых нумера, женский и мужской. Блаженно-синее небо, крошечные детские солнца в каждой из блях, не омраченные безумием мыслей лица... Лучи — понимаете: всё из какой-то единой, лучистой, улыбающейся материи. А медные такты: «Тра-та-та-там. Тра-та-та-там», эти сверкающие на солнце медные ступени и с каждой ступенью — вы поднимаетесь все выше, в головокружительную синеву... И вот, так же, как это было утром, на эллинге, я опять увидел, будто только вот сейчас первый раз в жизни — увидел все: непреложные прямые улицы, брызжущее лучами стекло мостовых, божественные параллелепипеды прозрачных жилищ, квадратную гармонию серо-голубых шеренг. И так: будто не целые поколения, а я — именно я — победил старого Бога и старую жизнь, именно я создал все это, и я как башня, я боюсь двинуть локтем, чтобы не посыпались осколки стен, куполов, машин... А затем мгновение — прыжок через века, с + на — . Мне вспомнилась (очевидно, — ассоциация по контрасту) — мне вдруг вспомнилась картина в музее: их, тогдашний, двадцатых веков проспект, оглушительно пестрая, путаная толчея людей, колес, животных, афиш, деревьев, красок, птиц... И ведь говорят, это на самом деле было — это могло быть. Мне показалось это так неправдоподобно, так нелепо, что я не выдержал и расхохотался вдруг. И тотчас же эхо — смех — справа. Обернулся: в глаза мне — белые — необычайно белые и острые зубы, незнакомое женское лицо. — Простите, — сказала она, — но вы так вдохновенно все озирали, — как некий мифический бог в седьмой день творения. Мне кажется, вы уверены, что и меня сотворили вы, а не кто иной. Мне очень лестно... Все это — без улыбки, я бы даже сказал — с некоторой почтительностью (может быть, ей известно, что я — строитель Интеграла). Но не знаю — в глазах или бровях — какой-то странный раздражающий икс, и я никак не могу его поймать, дать ему цифровое выражение. Я почему-то смутился и, слегка путаясь, стал логически мотивировать свой смех. Совершенно ясно, что этот контраст, эта непроходимая пропасть между сегодняшним и тогдашним... — Но почему же — непроходимая? (Какие белые зубы!) Через пропасть — можно перекинуть мостик. Вы только представьте себе: барабан, батальоны, шеренги — ведь это тоже было — и, следовательно... — Ну да: ясно! — крикнула она (это было поразительное пересечение мыслей: она — почти моими же словами — то, что я записывал перед прогулкой). — Понимаете: даже мысли. Это потому, что никто не «один», но «один из». Мы так одинаковы... Она: — Вы уверены? Я увидел острым углом вздернутые к вискам брови — как острые рожки икса, опять почему-то сбился; взглянул направо, налево — и... Направо от меня — она, тонкая, резкая, упрямо-гибкая, как хлыст, I-330 (вижу теперь ее нумер); направо — О, совсем другая, вся из окружностей, с детской складочкой на руке; и с краю нашей четверки — неизвестный мне мужской нумер, какой-то дважды изогнутый, вроде буквы S. Мы все были разные... Эта, справа, I-330, перехватила, по-видимому, мой растерянный взгляд, — и со вздохом: — Да... Увы! В сущности, это «увы» было совершенно уместно. Но опять что-то такое на лице у ней или в голосе... Я — с необычайной для меня резкостью — сказал: — Ничего не увы. Наука растет, и ясно — если не сейчас, так через пятьдесят, сто лет... — Даже носы у всех... — Да, носы, — я уже почти кричал. — Раз есть — все равно какое основание для зависти... Раз у меня нос пуговицей, а у другого... — Ну, нос-то у вас, пожалуй, даже и «классический», как в старину говорили. А вот руки... Нет, покажите-ка, покажите-ка руки! Терпеть не могу, когда смотрят на мои руки: все в волосах, лохматые — какой-то нелепый атавизм. Я протянул руку и — по возможности посторонним голосом — сказал: — Обезьяньи. Она взглянула на руки, потом на лицо: — Да, это прелюбопытный аккорд, — она прикидывала меня глазами, как на весах, мелькнули опять рожки в углах бровей. — Он записан на меня, — радостно-розово открыла рот О-90. Уж лучше бы молчала — это было совершенно ни к чему. Вообще, эта милая О... как бы сказать... у ней неправильно рассчитана скорость языка, секундная скорость языка должна быть всегда немного меньше секундной скорости мысли, а уж никак не наоборот. В конце проспекта, на аккумуляторной башне, колокол гулко бил 17. Личный час кончился. I-330 уходила вместе с тем, S-образным мужским нумером. У него такое — внушающее почтение и, теперь вижу, как будто даже знакомое лицо. Где-нибудь встречал его — сейчас не вспомню. На прощание I — все так же иксово — усмехнулась мне. — Загляните послезавтра в аудиториум 112. Я пожал плечами: — Если у меня будет наряд — именно на тот аудиториум, какой вы назвали... Она с какой-то непонятной уверенностью: — Будет. На меня эта женщина действовала так же неприятно, как случайно затесавшийся в уравнение неразложимый иррациональный член. И я был рад остаться хоть ненадолго вдвоем с милой О. Об руку с ней мы прошли четыре линии проспектов. На углу ей было направо, мне — налево. — Я бы так хотела сегодня прийти к вам, опустить шторы. Именно сегодня, сейчас... — робко подняла на меня О круглые, сине-хрустальные глаза. Смешная. Ну, что я мог ей сказать? Она была у меня только вчера и не хуже меня знает, что наш ближайший сексуальный день — послезавтра. Это просто все то же самое ее «опережение мысли» — как бывает (иногда вредное) опережение подачи искры в двигателе. При расставании я два... нет, буду точен: три раза поцеловал чудесные, синие, не испорченные ни одним облачком, глаза.'
# print(FindNames(text))


# In[4]:


# print(FindNames('Tests/Воина и мир.txt', True))


# In[5]:


# print(FindNames('Шабаршин Олег Сергеевич, пожалуйста'))


# In[6]:


# print(FindDates('19.06.2019 пришел я значит в магазин, а он работает только с 21-го июня'))


# In[7]:


# print(FindDates('Tests/Воина и мир.txt', True)) 


# In[8]:


# print(FindAddrs('Я буду на ул. Ленина 72, кв. 114'))


# In[9]:


#print(FindAddrs('Tests/2слова.txt', True))


# In[10]:


#print(FindAddrs('Tests/Воина и мир.txt', True)) НЕ ЗАПУСКАТЬ! ВИДИМО, ЗАЦИКЛИВАЕТСЯ


# In[ ]:




